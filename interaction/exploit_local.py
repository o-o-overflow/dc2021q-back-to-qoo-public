from Crypto.Cipher import AES
from pwn import process
import hashlib
import binascii


def key_array_to_key_string(key_list):
    key_string_binary = b''.join([bytes([x]) for x in key_list])
    return hashlib.md5(key_string_binary).digest()


p = process('../service/src/service.py')

bases = []
secrets = []
for i in range(20):
    p.recvuntil('Your dealer bets ')
    referee1 = int(p.recvline().strip())
    print(f"referee1: {referee1}")

    p.clean()
    # if referee is 0, then rotate left, otherwise rotate right
    if referee1 == 0:
        p.sendline("1")
    elif referee1 == 1:
        p.sendline("2")

    info = p.recvline().strip()
    print(f"info: {info}")
    words = info.split(b",")
    referee2 = int(words[0][-1]) - 48
    bet_1 = int(words[1][-1]) - 48
    bases.append(referee2)

    result = p.recvline().strip()
    print(f"result: {result}")

    print(f"referee1: {referee1}, referree2: {referee2}, bet_1: {bet_1}")
    if result == b"Win!":
        print("HERE")
        bet_2 = (referee1 * referee2) ^ bet_1
    else:
        bet_2 = (referee1 * referee2) ^ 1 ^ bet_1

    print(f"partner's bet: {bet_2}")
    # assert bet_2 == int(words[2][-1]) - 48

    secrets.append(bet_2)

secret_key = []

for i in range(20):
    p.recvuntil("from adamd: ")
    msg = p.recvline().strip()
    basis = int(msg.split(b":")[1])

    print(f"basis: {basis}")
    if basis == bases[i]:
        print("correct")
        secret_key.append(secrets[i])
        # put your partner's bet

print(f"secret key: {secret_key}")

p.recvuntil("secret key: ")
print(p.recvline())

p.recvuntil("from adamd: ")
msg = p.recvline().strip()
nonce = binascii.unhexlify(msg.split(b":")[1])

p.recvuntil("from adamd: ")
msg = p.recvline().strip()
ciphertext = binascii.unhexlify(msg.split(b":")[1])

key = key_array_to_key_string(secret_key)

decrypt_cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
plaintext = decrypt_cipher.decrypt(ciphertext)

print(f"FLAG: {plaintext}")
