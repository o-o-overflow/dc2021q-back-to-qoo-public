#!/usr/bin/env python3
from Crypto.Cipher import AES
from pwn import process, remote
import hashlib
import binascii
import sys
from time import sleep

PLAY = 128


def key_array_to_key_string(key_list):
    key_string_binary = b''.join([bytes([x]) for x in key_list])
    return hashlib.md5(key_string_binary).digest()


while True:
    if len(sys.argv) > 2:
        host = sys.argv[1]
        port = int(sys.argv[2])
        p = remote(host, port)
    else:
        p = process("../service/src/service.py")

    bases = []
    secrets = []
    for i in range(PLAY):
        print(i)
        p.recvuntil(b'Your competitor bets on ')
        referee1 = int(p.recvline().strip())
        # print(f"referee1: {referee1}")

        p.recvuntil(b"Use your magic qoin\n")
        p.sendline(b"2")
        p.recvuntil(b"rotate right\n")
        # if referee is 0, then rotate left, otherwise rotate right
        if referee1 == 0:
            p.sendline(b"1")
        elif referee1 == 1:
            p.sendline(b"2")
        # p.sendline(b"0")
        p.recvuntil(b"]: zardus's")
        info = p.recvline().strip()
        # print(f"info: {info}")
        words = info.split(b",")
        referee2 = int(words[0][-1]) - 48
        bet_1 = int(words[1][-1]) - 48
        bases.append(referee2)

        result = p.recvline().strip()
        # print(f"result: {result}")

        # print(f"referee1: {referee1}, referree2: {referee2}, bet_1: {bet_1}")
        if result == b"Win!":
            bet_2 = (referee1 * referee2) ^ bet_1
        else:
            bet_2 = (referee1 * referee2) ^ 1 ^ bet_1

        # print(f"partner's bet: {bet_2}")
        # assert bet_2 == int(words[2][-1]) - 48

        secrets.append(bet_2)

    p.recvuntil(b"zardus: ")

    line = p.recvline()

    if b"You are my true good" in line:
        print("Yes I win")
        break
    sleep(2)

secret_key = []

# p.interactive()

for i in range(PLAY):
    p.recvuntil(b"from adamd: ")
    msg = p.recvline().strip()
    # print(msg)
    basis = int(msg.split(b":")[1])

    # print(f"basis: {basis}")
    if basis == bases[i]:
        # print("correct")
        secret_key.append(secrets[i])
        # put your partner's bet

print(f"secret key: {secret_key}")

# p.recvuntil(b"secret key: ")
# print(p.recvline())

p.recvuntil(b"from adamd: ")
msg = p.recvline().strip()
nonce = binascii.unhexlify(msg.split(b":")[1])

p.recvuntil(b"from adamd: ")
msg = p.recvline().strip()
ciphertext = binascii.unhexlify(msg.split(b":")[1])

key = key_array_to_key_string(secret_key)

decrypt_cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
plaintext = decrypt_cipher.decrypt(ciphertext)

print(f"FLAG: {plaintext}")
